`timescale 1ns/1ps

module single_FIFO (
    input           rx_clk,
    input           rx_rst_n,
    input [23:0]    rx_data,
    input           rx_data_valid,
    output          rx_ready_out,

    input           tx_clk,
    input           tx_rst_n,
    input           tx_read_in,
    output          tx_data_ready_out,
    output reg [23:0]   tx_data,
    output reg         tx_valid
);

// ping_fifo signals
wire            ping_fifo_wr_clk;
reg             ping_fifo_wr_ena;
wire [23:0]      ping_fifo_din;
wire            ping_fifo_full/*synthesis keep*/;
wire            ping_fifo_rd_clk;
wire             ping_fifo_rd_ena;
wire [23:0]      ping_fifo_dout;
wire            ping_fifo_empty/*synthesis keep*/;
reg             ping_fifo_dout_valid;
reg             ping_fifo_rx_ready;
wire             ping_fifo_tx_ready;

assign ping_fifo_wr_clk = rx_clk;
assign ping_fifo_wr_ena = rx_data_valid;
assign ping_fifo_din = rx_data;
assign rx_ready_out = ~ping_fifo_full;

assign tx_data_ready_out = ~ping_fifo_empty;
assign ping_fifo_rd_ena = tx_read_in;

assign ping_fifo_rd_clk = tx_clk;
assign tx_data = ping_fifo_dout;

//----------------------------------

always @(posedge tx_clk) begin
    ping_fifo_dout_valid <= ping_fifo_rd_ena;
end

always @(posedge tx_clk) begin
    if (ping_fifo_dout_valid) begin
        tx_valid <= ping_fifo_dout_valid;
        tx_data <= ping_fifo_dout;
    end
    else if (pong_fifo_dout_valid) begin
        tx_valid <= pong_fifo_dout_valid;
        tx_data <= pong_fifo_dout;
    end
end


dcfifo_24inx512 ping_fifo (
    .data    (ping_fifo_din),    //  fifo_input.datain
    .wrreq   (ping_fifo_wr_ena),   //            .wrreq
    .wrusedw (ping_fifo_wr_used),
    .rdreq   (ping_fifo_rd_ena),   //            .rdreq
    .rdusedw (ping_fifo_rd_used),
    .wrclk   (ping_fifo_wr_clk),   //            .wrclk
    .rdclk   (ping_fifo_rd_clk),   //            .rdclk
    .q       (ping_fifo_dout),       // fifo_output.dataout
    .rdempty (ping_fifo_empty), //            .rdempty
    .wrfull  (ping_fifo_full)   //            .wrfull
);



endmodule // singleFIFO